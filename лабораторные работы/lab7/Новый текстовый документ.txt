Для доступа к информации внутри объекта метод может использовать ключевое слово this. 
Значение this – это объект «перед точкой», который использовался для вызова метода.
Значение this вычисляется во время выполнения кода и зависит от контекста.
В строгом режиме ("use strict") в таком коде значением this будет являться undefined. 
Если попытаться получить доступ к name, используя this.name – это вызовет ошибку. 
В нестрогом режиме значением this в таком случае будет глобальный объект. 
Обычно подобный вызов является ошибкой программирования. 
Если внутри функции используется this, тогда ожидается, что она будет вызываться в контексте какого-либо объекта.


Чтобы сделать range итерируемым (и позволить с ним работать for..of), 
нужно добавить в объект метод с именем Symbol.iterator (специальный встроенный Symbol, 
созданный как раз для этого).
теперь возвращает генератор, и его методы – в точности то, что ожидает for..of: у него есть метод .next(), 
который возвращает значения в виде {value: ..., done: true/false}. 

Здесь вы создаете пользовательский итератор для свойства shoes объекта products.
Этот итератор позволяет вам итерироваться по разным типам обуви (например, кроссовки, сапоги),
содержащимся в свойстве shoes.
Symbol.iterator: Этот специальный символ в JavaScript используется для определения 
пользовательского поведения итерации. Здесь он используется для определения итератора для свойства shoes.
function*: Этот синтаксис используется для создания генераторной функции. 
Генераторные функции позволяют приостанавливать и возобновлять выполнение функции, 
что полезно для создания итераторов.
const types = Object.keys(this): Эта строка получает массив имен свойств (типов обуви) из объекта shoes.
for (let type of types) { yield this[type]; }: Этот цикл перебирает каждый тип обуви и 
возвращает соответствующий массив обуви.

Object.defineProperty(obj, propertyName, descriptor)
obj, propertyName – объект и его свойство, для которого нужно применить дескриптор.
descriptor – применяемый дескриптор.
Если свойство существует, defineProperty обновит его флаги. 
В противном случае метод создает новое свойство с указанным значением и флагами;
если какой-либо флаг не указан явно, ему присваивается значение false. 
Геттер - это функция, которая вызывается при попытке получения значения свойства.
 В данном случае, установка configurable: true позволяет изменять это свойство в будущем.
writable – если true, свойство можно изменить, иначе оно только для чтения.
enumerable – если true, свойство перечисляется в циклах, в противном случае циклы его игнорируют.
configurable – если true, свойство можно удалить, а эти атрибуты можно изменять, иначе этого делать нельзя.
